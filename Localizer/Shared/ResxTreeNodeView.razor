@using Localizer.Core.Model;
@using Localizer.Core.Helpers;
@using System.Text;
@implements IDisposable

@if (TreeNode is not null)
{
    if (TreeNode is ResxFileSystemLeafNode leaf)
    {
        <MudTreeViewItem OnClick="FileClicked" Value="leaf.NodeName" Icon="@Icons.Custom.FileFormats.FileDocument"
            IconColor="Color.Info" />
    }
    else if (TreeNode is ResxFileSystemFolderNode folderNode)
    {
        <MudTreeViewItem Value="folderNode.NodeName" Icon="@(GetFolderIcon())" IconColor="GetFolderColor()"
            Expanded="IsExpanded" ExpandedChanged="OnExpand">
            @if (IsExpanded)
            {
                <Virtualize Context="child" Items="folderNode.SortedChildren().ToList()" TItem="ResxFileSystemNodeBase"
                    OverscanCount="5">
                    <ResxTreeNodeView TreeNode="child" ResxManager="ResxManager" Grid="Grid" />
                </Virtualize>
            }
        </MudTreeViewItem>
    }
}

@code
{
    [Parameter]
    public ResxFileSystemNodeBase TreeNode { get; set; }

    [Parameter]
    public ResxManager ResxManager { get; set; }
    [Parameter]
    public ResxDataGridView Grid { get; set; }

    bool IsExpanded { get; set; } = false;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SubscribeToEvents();
        StateHasChanged();

    }
    private void SubscribeToEvents()
    {
        if (TreeNode is not null)
        {
            TreeNode.OnNodeChanged += OnNodeChanged;
        }
    }

    System.Collections.ObjectModel.ObservableCollection<ResxEntity> entities1;
    private void FileClicked()
    {
        if (TreeNode is null)
        {
            return;
        }

        var path = TreeNode.FullPath;
        entities1 ??= new System.Collections.ObjectModel.ObservableCollection<ResxEntity>(ResxManager.ResxEntities.ToList());

        var entities = entities1
        .Where(x =>
        {
            (TreeNode as ResxFileSystemLeafNode).ResxEntry.TryGetFilePath(string.Empty, out var filePath);
            x.Node.ResxEntry.TryGetFilePath(string.Empty, out var filePath2);
            return filePath == filePath2;
        }).ToList();


        ResxManager.ResxEntities.Clear();

        entities.Select(x =>
        {
            ResxManager.ResxEntities.Add(x);
            return 1;
        });

        Grid.Refresh();
        StateHasChanged();
    }

    private void OnNodeChanged(object sender)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        TreeNode?.Dispose();
    }

    void OnExpand(bool isExpanded)
    {
        IsExpanded = isExpanded;
        StateHasChanged();
    }

    private string GetFolderIcon()
    {
        return TreeNode is ResxFileSystemFolderNode folderNode && folderNode.IsCsProjNode
        ? Icons.Material.Filled.SettingsEthernet
        : Icons.Custom.Uncategorized.Folder;
    }
    private Color GetFolderColor()
    {
        return TreeNode is ResxFileSystemFolderNode folderNode && folderNode.IsCsProjNode
        ? Color.Success
        : Color.Warning;
    }

    @* private string GetToolTipForLeaf(ResxLoadDataLeafNode leaf)
{
var tooltip = new StringBuilder();
tooltip.AppendLine($"File Name: {leaf.NeutralFileNameWithExtension}");
// var list all non neutral files cultures
var nonNeutralFiles = leaf.CultureFileNameMap.Keys.Join(",");
tooltip.AppendLine($"Non Neutral Files: {nonNeutralFiles}");

var folderLocation = leaf.CultureFileNameMap.First().Value.GetParentDirectory();
tooltip.AppendLine($"Folder Location: {folderLocation}");

return tooltip.ToString();
} *@
}
