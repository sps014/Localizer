@using Localizer.Core.Model;
@using Localizer.Core.Helper
@using System.Text;
@implements IDisposable

@if (TreeNode is not null)
{
    if (TreeNode is ResxFileSystemLeafNode leaf)
    {
        <MudTreeViewItem Value="leaf.NodeName" Icon="@Icons.Custom.FileFormats.FileDocument" IconColor="Color.Info" />
    }
    else if (TreeNode is ResxFileSystemFolderNode folderNode)
    {
        <MudTreeViewItem Value="folderNode.NodeName" Icon="@(GetFolderIcon())" IconColor="GetFolderColor()"
            Expanded="IsExpanded" ExpandedChanged="OnExpand">
            @if (IsExpanded)
            {
                <Virtualize Context="child" Items="folderNode.SortedChildren().ToList()" TItem="ResxFileSystemNodeBase"
                    OverscanCount="5">
                    <ResxTreeNodeView TreeNode="child" />
                </Virtualize>
            }
        </MudTreeViewItem>
    }
}

@code
{
    [Parameter]
    public ResxFileSystemNodeBase TreeNode { get; set; }

    bool IsExpanded { get; set; } = false;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SubscribeToEvents();
        StateHasChanged();

    }
    private void SubscribeToEvents()
    {
        if (TreeNode is not null)
        {
            TreeNode.OnNodeChanged += OnNodeChanged;
        }
    }

    private void OnNodeChanged(object sender)
    {
        InvokeAsync(()=>
        {
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        TreeNode?.Dispose();
    }

    void OnExpand(bool isExpanded)
    {
        IsExpanded = isExpanded;
        StateHasChanged();
    }

    private string GetFolderIcon()
    {
        return TreeNode is ResxFileSystemFolderNode folderNode && folderNode.IsCsProjNode
        ? Icons.Material.Filled.SettingsEthernet
        : Icons.Custom.Uncategorized.Folder;
    }
    private Color GetFolderColor()
    {
        return TreeNode is ResxFileSystemFolderNode folderNode && folderNode.IsCsProjNode
        ? Color.Success
        : Color.Warning;
    }

    @* private string GetToolTipForLeaf(ResxLoadDataLeafNode leaf)
{
var tooltip = new StringBuilder();
tooltip.AppendLine($"File Name: {leaf.NeutralFileNameWithExtension}");
// var list all non neutral files cultures
var nonNeutralFiles = leaf.CultureFileNameMap.Keys.Join(",");
tooltip.AppendLine($"Non Neutral Files: {nonNeutralFiles}");

var folderLocation = leaf.CultureFileNameMap.First().Value.GetParentDirectory();
tooltip.AppendLine($"Folder Location: {folderLocation}");

return tooltip.ToString();
} *@
}
