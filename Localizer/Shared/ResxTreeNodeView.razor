@using Localizer.Core.Model;
@using Localizer.Core.Helper
@using System.Text;

@if(TreeNode is not null)
{
    if(TreeNode is ResxLoadDataLeafNode leaf)
    {
        <MudTreeViewItem Value="leaf.NeutralFileName" Icon="@Icons.Custom.FileFormats.FileDocument" IconColor="Color.Info"/>
    }
    else if(TreeNode is ResxLoadDataNode folderNode)
    {
        <MudTreeViewItem Value="folderNode.FolderName"
                         Icon="@(GetFolderIcon())"
            IconColor="GetFolderColor()" Expanded="IsExpanded" ExpandedChanged="OnExpand">
            @if (IsExpanded)
            {
                <Virtualize Context="child" Items="folderNode.SortedChildren().ToList()" TItem="IResxLoadDataNode" OverscanCount="30">
                    <ResxTreeNodeView TreeNode="child" />
                </Virtualize>
            }
        </MudTreeViewItem>
    }
}

@code
{
    [Parameter]
    public IResxLoadDataNode TreeNode { get; set; }

    bool IsExpanded { get; set; } = false;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }
    void OnExpand(bool isExpanded)
    {
        IsExpanded = isExpanded;
        StateHasChanged();
    }

    private string GetFolderIcon()
    {
        return TreeNode is ResxLoadDataNode folderNode && folderNode.IsCsProjNode
                ? Icons.Material.Filled.SettingsEthernet
                : Icons.Custom.Uncategorized.Folder;
    }
    private Color GetFolderColor()
    {
        return TreeNode is ResxLoadDataNode folderNode && folderNode.IsCsProjNode
                ? Color.Success
                : Color.Warning;
    }

    private string GetToolTipForLeaf(ResxLoadDataLeafNode leaf)
    {
        var tooltip = new StringBuilder();
        tooltip.AppendLine($"File Name: {leaf.NeutralFileNameWithExtension}");
        // var list all non neutral files cultures
        var nonNeutralFiles = leaf.CultureFileNameMap.Keys.Join(",");
        tooltip.AppendLine($"Non Neutral Files: {nonNeutralFiles}");

        var folderLocation = leaf.CultureFileNameMap.First().Value.GetParentDirectory();
        tooltip.AppendLine($"Folder Location: {folderLocation}");

        return tooltip.ToString();
    }
}
